1. 제어의 역전, 개발자가 시키는대로 스프링이 동작하는게 아니라 
		   스프링 안에 짜여있는 구조대로 개발자가 구성해야 한다. 
		   (ex. new 기능이 따로 없다(= 따로 코드를 안짠다) 이미 스프링이 객체 생성을 이미 다 해 놓은걸 
		   getBean()을 통해서 생성되어 있는 객체를 받아서 사용한다.

2. 의존성 주입, 라이브러리 기능도 자동으로 넣어준다 

3. 관점 지향 프로그래밍, 내가 설정한 루틴을 자동으로 실행해준다 
(ex, 제대로 변수값 설정이 안되어 있을까봐 
										  
자동으로 입력이 잘 되었는지 확인 시켜주는 기능을 설정
										 
 해 놓았을 시 자동으로 검사해준다)

4.패키지 네임이 평소에는 예를 들어 samsung.co.kr이라면 스프링에서는 co.kr.samsung 처럼 다르게 쓰이는데 
  co.kr이 group id라고 불리고 samsung이 artifact id 라고 분류되는데 여기서 artifact id (=contextPath) 라고 인식된다 
  group id 와 artifact id가 합쳐져서 package라고 불린다 여기서 핵심은 package 이름에 contextPath가 들어가므로 이거 잘못 설정
   하면 실행조차 안된다는거다


작성순서대로 값을 부여해야한다.


----------------------------------------------------------------
원래는 Spring Bean 
	Configuration File 에다가 <bean>으로 기능구현을 했지만
이젠 자바에서 바로 할수 있는 법을 배운다
@Configuration
public class Aaaa{ 
이런 방식으로
각메소드에 
@Bean 애너테이션을 넣어 작업한다.
public void aa(){
} 
이게 <bean>으로 만든것과 같은 효과를 낸다
애너테이션 코드줄을 많이 줄여준다, 일종의 줄임말과 같은 효과
(뚝배기 불고기 = 뚝불) 원래있던 긴코드를 쓰는게 아니라 
ex. @Controller 직접 안만들어도 이렇게 만들수도 있음
------------------------------------------------------------------

지금까지 클래스 파일을 나눠서 작업 하는 이유는 db관점에서 
필드마다 값을 따로 주고 관리 하는 db관점에서 이런식으로 설계해야 하므로

폴더에 s문양있는건 스프링 폴더라는 뜻이다.

원래 web.xml 들어가면 웰컴 파일(index.jsp)가 소개 되어있는데 스프링 에서는 우리가 따로 작업해줘야 한다.

만드는 순서는 
boardDTO
boardDAO
boardService + boardServiceImpl
boardController + jsp

aop 각문제를 해결하는 핵심로직(Service) 모든 문제에 적용되는 공통로직(aop)
공통로직(insert, delete 이런걸 하면 트랙잭션을 해야하는데 특징이 둘다 하던가, 아예 안하던가, 두개 작업을 수행하는데 모두가 성공해야 성공 안된다면 다 실패처리 해야한다, ex)은행 거래(송금과 예금)




